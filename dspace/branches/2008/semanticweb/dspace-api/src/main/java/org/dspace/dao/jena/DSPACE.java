package org.dspace.dao.jena;

import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.ResourceFactory;

/**
 * Vocabulary definitions from dspace.n3 
 * @author Auto-generated by schemagen on 30 Jun 2008 16:17 
 * @author Peter Coetzee modified, refactored
 */
public class DSPACE {
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://purl.org/dspace/model#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = ResourceFactory.createResource( NS );
    
    /** <p>Administrator of this Collection.</p> */
    public static final Property admin = ResourceFactory.createProperty( NS + "admin" );
    
    /** <p>Known file extension for the given BitstreamFormat.</p> */
    public static final Property fileExtension = ResourceFactory.createProperty( NS + "fileExtension" );
    
    /** <p>Bitstream Property</p> */
    public static final Property hasBitstream = ResourceFactory.createProperty( NS + "hasBitstream" );
    
    /** <p>Bitstream Format Property</p> */
    public static final Property hasBitstreamFormat = ResourceFactory.createProperty( NS + "hasBitstreamFormat" );
    
    /** <p>Has DSpace Bundle</p> */
    public static final Property hasBundle = ResourceFactory.createProperty( NS + "hasBundle" );
    
    /** <p>Has Collection</p> */
    public static final Property hasCollection = ResourceFactory.createProperty( NS + "hasCollection" );
    
    /** <p>Has DSpace Community</p> */
    public static final Property hasCommunity = ResourceFactory.createProperty( NS + "hasCommunity" );
    
    /** <p>Has Item</p> */
    public static final Property hasItem = ResourceFactory.createProperty( NS + "hasItem" );
    
    /** <p>Has DSpace Group Member</p> */
    public static final Property hasMember = ResourceFactory.createProperty( NS + "hasMember" );
    
    /** <p>Has Sub-Community</p> */
    public static final Property hasSubCommunity = ResourceFactory.createProperty( NS + "hasSubCommunity" );
    
    /** <p>Has Sub-Group</p> */
    public static final Property hasSubGroup = ResourceFactory.createProperty( NS + "hasSubGroup" );
    
    /** <p>Part of Collection</p> */
    public static final Property isPartOfCollection = ResourceFactory.createProperty( NS + "isPartOfCollection" );
    
    /** <p>Is part of DSpace Community</p> */
    public static final Property isPartOfCommunity = ResourceFactory.createProperty( NS + "isPartOfCommunity" );
    
    /** <p>Part of DSpace Group</p> */
    public static final Property isPartOfGroup = ResourceFactory.createProperty( NS + "isPartOfGroup" );
    
    /** <p>Part of DSpace Item</p> */
    public static final Property isPartOfItem = ResourceFactory.createProperty( NS + "isPartOfItem" );
    
    /** <p>Is Part of DSpace Site</p> */
    public static final Property isPartOfSite = ResourceFactory.createProperty( NS + "isPartOfSite" );
    
    /** <p>The EPerson's Language.</p> */
    public static final Property language = ResourceFactory.createProperty( NS + "language" );
    
    /** <p>License for this Collection.</p> */
    public static final Property license = ResourceFactory.createProperty( NS + "license" );
    
    /** <p>A Community or Collection Logo</p> */
    public static final Property logo = ResourceFactory.createProperty( NS + "logo" );
    
    /** <p>Full Text Description of the Object (often contains HTML)</p> */
    public static final Property longDescription = ResourceFactory.createProperty( NS + "longDescription" );
    
    /** <p>MIME Type of the given BitstreamFormat.</p> */
    public static final Property mimeType = ResourceFactory.createProperty( NS + "mimeType" );
    
    /** <p>Submitter of this Item / Collection.</p> */
    public static final Property submitter = ResourceFactory.createProperty( NS + "submitter" );
    
    /** <p>Bitstream Format Support Level.</p> */
    public static final Property support = ResourceFactory.createProperty( NS + "support" );
    
    /** <p>Universally Unique Identifier for this object.</p> */
    public static final Property uuid = ResourceFactory.createProperty( NS + "uuid" );
    
    /** <p>A DSpace Bitstream</p> */
    public static final Resource Bitstream = ResourceFactory.createResource( NS + "Bitstream" );
    
    /** <p>A DSpace Bitstream Format</p> */
    public static final Resource BitstreamFormat = ResourceFactory.createResource( NS + "BitstreamFormat" );
    
    /** <p>A DSpace Bundle</p> */
    public static final Resource Bundle = ResourceFactory.createResource( NS + "Bundle" );
    
    /** <p>A DSpace Collection</p> */
    public static final Resource Collection = ResourceFactory.createResource( NS + "Collection" );
    
    /** <p>A DSpace Community</p> */
    public static final Resource Community = ResourceFactory.createResource( NS + "Community" );
    
    /** <p>DSpace Object is an abstract Class for any Specific DSpace Data Model Types.</p> */
    public static final Resource DSpaceObject = ResourceFactory.createResource( NS + "DSpaceObject" );
    
    /** <p>A DSpace EPerson</p> */
    public static final Resource EPerson = ResourceFactory.createResource( NS + "EPerson" );
    
    /** <p>A DSpace Group</p> */
    public static final Resource Group = ResourceFactory.createResource( NS + "Group" );
    
    /** <p>A DSpace Item</p> */
    public static final Resource Item = ResourceFactory.createResource( NS + "Item" );
    
    /** <p>A DSpace Policy</p> */
    public static final Resource Policy = ResourceFactory.createResource( NS + "Policy" );
    
    /** <p>A DSpace Site</p> */
    public static final Resource Site = ResourceFactory.createResource( NS + "Site" );
    
    /** <p>D2RQ Database Store</p> */
    public static final Resource d2rqStore = ResourceFactory.createResource( NS + "d2rqStore" );
    
    /** <p>Triple Store</p> */
    public static final Resource tripleStore = ResourceFactory.createResource( NS + "tripleStore" );
    
}
